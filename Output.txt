> #############################################
> ## 1 Model-Free Analysis
> #############################################
> # We'll examine frequencies, cross-tabulations, and chosen analysis 
> # for a thorough model-free exploration.
> #############################################
> ## 1.1 : Frequencies & Tables
> #############################################
> # List of key attributes to explore
> attributes <- c(
+   "Brand", "Cash_Back", "Resolution", "Memory", "SD_Slot", 
+   "Performance", "Battery_Run_Time", "Connections", 
+   "Sync_to_Smartphone", "Value_Pack", "Equipment", "Display_Size"
+ )
> 
> cat("\n===========================================\n")

===========================================
> cat("    FREQUENCIES & PROPORTIONS OF ATTRIBUTES\n")
    FREQUENCIES & PROPORTIONS OF ATTRIBUTES
> cat("===========================================\n")
===========================================
> 
> # Basic Frequency and Proportion for each attribute
> for (attr in attributes) {
+   cat("\n----------------------------\n")
+   cat("Attribute:", attr, "\n")
+   cat("----------------------------\n")
+   
+   freq_table <- table(combined_data[[attr]])
+   prop_table <- prop.table(freq_table)
+   
+   cat("Frequency:\n")
+   print(freq_table)
+   
+   cat("\nProportion:\n")
+   print(prop_table)
+ }

----------------------------
Attribute: Brand 
----------------------------
Frequency:

Outside Option              A              B              C              D              E              F              G 
         13598           5829           5827           5830           5836           5826           5825           5821 

Proportion:

Outside Option              A              B              C              D              E              F              G 
     0.2500000      0.1071665      0.1071297      0.1071849      0.1072952      0.1071113      0.1070930      0.1070194 

----------------------------
Attribute: Cash_Back 
----------------------------
Frequency:

No Cash Back      100 EUR      150 EUR       50 EUR 
       31020         7213         3829        12330 

Proportion:

No Cash Back      100 EUR      150 EUR       50 EUR 
  0.57030446   0.13261141   0.07039638   0.22668775 

----------------------------
Attribute: Resolution 
----------------------------
Frequency:

Standard     High 
   33995    20397 

Proportion:

Standard     High 
   0.625    0.375 

----------------------------
Attribute: Memory 
----------------------------
Frequency:

  8GB 128GB  16GB  32GB  64GB 
21756  8166  8157  8155  8158 

Proportion:

      8GB     128GB      16GB      32GB      64GB 
0.3999853 0.1501324 0.1499669 0.1499301 0.1499853 

----------------------------
Attribute: SD_Slot 
----------------------------
Frequency:

   With Without 
  25264   29128 

Proportion:

     With   Without 
0.4644801 0.5355199 

----------------------------
Attribute: Performance 
----------------------------
Frequency:

  1 GHz 1.6 GHz 2.2 GHz 
  27196   13598   13598 

Proportion:

  1 GHz 1.6 GHz 2.2 GHz 
   0.50    0.25    0.25 

----------------------------
Attribute: Battery_Run_Time 
----------------------------
Frequency:

 4-8 hours 8-12 hours 
     33991      20401 

Proportion:

 4-8 hours 8-12 hours 
 0.6249265  0.3750735 

----------------------------
Attribute: Connections 
----------------------------
Frequency:

            WLAN  WLAN + LTE (4G) WLAN + UMTS (3G) 
           27196            13598            13598 

Proportion:

            WLAN  WLAN + LTE (4G) WLAN + UMTS (3G) 
            0.50             0.25             0.25 

----------------------------
Attribute: Sync_to_Smartphone 
----------------------------
Frequency:

   No   Yes 
33990 20402 

Proportion:

       No       Yes 
0.6249081 0.3750919 

----------------------------
Attribute: Value_Pack 
----------------------------
Frequency:

   No   Yes 
39092 15300 

Proportion:

       No       Yes 
0.7187086 0.2812914 

----------------------------
Attribute: Equipment 
----------------------------
Frequency:

                     None          32GB Memory Card                     Cover                  Keyboard Keyboard + Mouse + Pencil 
                    18703                      5101                      5096                      5091                      5106 
        Keyboard + Pencil                     Mouse                    Pencil 
                     5096                      5092                      5107 

Proportion:

                     None          32GB Memory Card                     Cover                  Keyboard Keyboard + Mouse + Pencil 
               0.34385571                0.09378217                0.09369025                0.09359832                0.09387410 
        Keyboard + Pencil                     Mouse                    Pencil 
               0.09369025                0.09361671                0.09389248 

----------------------------
Attribute: Display_Size 
----------------------------
Frequency:

 7 Inches 10 Inches 12 Inches 13 Inches  8 Inches 
    24822      6119      6120      6118     11213 

Proportion:

 7 Inches 10 Inches 12 Inches 13 Inches  8 Inches 
0.4563539 0.1124982 0.1125165 0.1124798 0.2061516 
> 
> #############################################
> ## 1.2 Cross-Tabulations
> #############################################
> 
> 
> cat("\n===========================================\n")

===========================================
> cat("      CROSS-TABULATIONS OF ATTRIBUTES\n")
      CROSS-TABULATIONS OF ATTRIBUTES
> cat("===========================================\n")
===========================================
> 
> # 1) Cash_Back x Brand
> cat("\n--- Cross-tabulation: Cash_Back x Brand ---\n")

--- Cross-tabulation: Cash_Back x Brand ---
> table_brand_cb <- table(combined_data$Brand, combined_data$Cash_Back)
> print(table_brand_cb)
                
                 No Cash Back 100 EUR 150 EUR 50 EUR
  Outside Option        13598       0       0      0
  A                      2387    1012     660   1770
  B                      2416    1143     564   1704
  C                      2377    1038     652   1763
  D                      2655    1110     393   1678
  E                      2519    1041     557   1709
  F                      2543    1034     420   1828
  G                      2525     835     583   1878
> cat("\nRow-wise Proportions:\n")

Row-wise Proportions:
> print(prop.table(table_brand_cb, margin = 1))
                
                 No Cash Back    100 EUR    150 EUR     50 EUR
  Outside Option   1.00000000 0.00000000 0.00000000 0.00000000
  A                0.40950420 0.17361469 0.11322697 0.30365414
  B                0.41462159 0.19615583 0.09679080 0.29243178
  C                0.40771870 0.17804460 0.11183533 0.30240137
  D                0.45493489 0.19019877 0.06734064 0.28752570
  E                0.43237212 0.17868177 0.09560590 0.29334020
  F                0.43656652 0.17751073 0.07210300 0.31381974
  G                0.43377427 0.14344614 0.10015461 0.32262498
> cat("\nColumn-wise Proportions:\n")

Column-wise Proportions:
> print(prop.table(table_brand_cb, margin = 2))
                
                 No Cash Back    100 EUR    150 EUR     50 EUR
  Outside Option   0.43836235 0.00000000 0.00000000 0.00000000
  A                0.07695035 0.14030223 0.17236876 0.14355231
  B                0.07788524 0.15846388 0.14729694 0.13819951
  C                0.07662798 0.14390683 0.17027945 0.14298459
  D                0.08558994 0.15388881 0.10263776 0.13609084
  E                0.08120567 0.14432275 0.14546879 0.13860503
  F                0.08197937 0.14335228 0.10968921 0.14825629
  G                0.08139910 0.11576321 0.15225908 0.15231144
> 
> # 2) Price Binning
> cat("\n--- Cross-tabulation: Price_Bin x Cash_Back ---\n")

--- Cross-tabulation: Price_Bin x Cash_Back ---
> combined_data$Price_Bin <- cut(
+   combined_data$Price,
+   breaks = c(-Inf, 0, 2, 4, 6, 8, Inf),
+   labels = c("0", "0-2", "2-4", "4-6", "6-8", ">8")
+ )
> 
> table_price_cb <- table(combined_data$Price_Bin, combined_data$Cash_Back)
> cat("\nFrequency:\n")

Frequency:
> print(table_price_cb)
     
      No Cash Back 100 EUR 150 EUR 50 EUR
  0          13598       0       0      0
  0-2         7509       0       0   2691
  2-4         4439    1685       0   4086
  4-6         3000    2841    1278   3059
  6-8         1379    1104    1290   1329
  >8          1095    1583    1261   1165
> cat("\nRow-wise Proportions (Price_Bin basis):\n")

Row-wise Proportions (Price_Bin basis):
> print(prop.table(table_price_cb, margin = 1))
     
      No Cash Back   100 EUR   150 EUR    50 EUR
  0      1.0000000 0.0000000 0.0000000 0.0000000
  0-2    0.7361765 0.0000000 0.0000000 0.2638235
  2-4    0.4347698 0.1650343 0.0000000 0.4001959
  4-6    0.2947534 0.2791315 0.1255649 0.3005502
  6-8    0.2702862 0.2163857 0.2528420 0.2604861
  >8     0.2145376 0.3101489 0.2470611 0.2282524
> cat("\nColumn-wise Proportions (Cash_Back basis):\n")

Column-wise Proportions (Cash_Back basis):
> print(prop.table(table_price_cb, margin = 2))
     
      No Cash Back    100 EUR    150 EUR     50 EUR
  0     0.43836235 0.00000000 0.00000000 0.00000000
  0-2   0.24206963 0.00000000 0.00000000 0.21824818
  2-4   0.14310123 0.23360599 0.00000000 0.33138686
  4-6   0.09671180 0.39387218 0.33376861 0.24809408
  6-8   0.04445519 0.15305698 0.33690259 0.10778589
  >8    0.03529981 0.21946486 0.32932881 0.09448500
> 
> # 3) Brand x Memory
> cat("\n--- Cross-tabulation: Brand x Memory ---\n")

--- Cross-tabulation: Brand x Memory ---
> table_brand_memory <- table(combined_data$Brand, combined_data$Memory)
> print(table_brand_memory)
                
                   8GB 128GB  16GB  32GB  64GB
  Outside Option 13598     0     0     0     0
  A               1121  1098  1238  1151  1221
  B               1211  1292  1019  1129  1176
  C               1202  1016  1207  1216  1189
  D               1122  1245  1173  1063  1233
  E               1021  1217  1424  1105  1059
  F               1217  1025  1124  1319  1140
  G               1264  1273   972  1172  1140
> cat("\nRow-wise Proportions:\n")

Row-wise Proportions:
> print(prop.table(table_brand_memory, margin = 1))
                
                       8GB     128GB      16GB      32GB      64GB
  Outside Option 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000
  A              0.1923143 0.1883685 0.2123863 0.1974610 0.2094699
  B              0.2078256 0.2217264 0.1748756 0.1937532 0.2018191
  C              0.2061750 0.1742710 0.2070326 0.2085763 0.2039451
  D              0.1922550 0.2133310 0.2009938 0.1821453 0.2112748
  E              0.1752489 0.2088912 0.2444216 0.1896670 0.1817714
  F              0.2089270 0.1759657 0.1929614 0.2264378 0.1957082
  G              0.2171448 0.2186909 0.1669816 0.2013400 0.1958426
> cat("\nColumn-wise Proportions:\n")

Column-wise Proportions:
> print(prop.table(table_brand_memory, margin = 2))
                
                        8GB      128GB       16GB       32GB       64GB
  Outside Option 0.62502298 0.00000000 0.00000000 0.00000000 0.00000000
  A              0.05152602 0.13445996 0.15177148 0.14114040 0.14966904
  B              0.05566281 0.15821700 0.12492338 0.13844267 0.14415298
  C              0.05524913 0.12441832 0.14797107 0.14911097 0.14574651
  D              0.05157198 0.15246143 0.14380287 0.13034948 0.15113999
  E              0.04692958 0.14903257 0.17457399 0.13549969 0.12981123
  F              0.05593859 0.12552045 0.13779576 0.16174126 0.13974013
  G              0.05809892 0.15589028 0.11916146 0.14371551 0.13974013
> 
> # 4) Brand x Display_Size
> cat("\n--- Cross-tabulation: Brand x Display_Size ---\n")

--- Cross-tabulation: Brand x Display_Size ---
> table_brand_display <- table(combined_data$Brand, combined_data$Display_Size)
> print(table_brand_display)
                
                 7 Inches 10 Inches 12 Inches 13 Inches 8 Inches
  Outside Option    13598         0         0         0        0
  A                  1644       752       997       957     1479
  B                  1539       971       944       836     1537
  C                  1603       845       825       817     1740
  D                  1674       838       752       936     1636
  E                  1511       918       838       795     1764
  F                  1438       831       989       862     1705
  G                  1815       964       775       915     1352
> cat("\nRow-wise Proportions:\n")

Row-wise Proportions:
> print(prop.table(table_brand_display, margin = 1))
                
                  7 Inches 10 Inches 12 Inches 13 Inches  8 Inches
  Outside Option 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000
  A              0.2820381 0.1290101 0.1710413 0.1641791 0.2537313
  B              0.2641153 0.1666381 0.1620045 0.1434701 0.2637721
  C              0.2749571 0.1449400 0.1415094 0.1401372 0.2984563
  D              0.2868403 0.1435915 0.1288554 0.1603838 0.2803290
  E              0.2593546 0.1575695 0.1438380 0.1364573 0.3027806
  F              0.2468670 0.1426609 0.1697854 0.1479828 0.2927039
  G              0.3118021 0.1656073 0.1331386 0.1571895 0.2322625
> cat("\nColumn-wise Proportions:\n")

Column-wise Proportions:
> print(prop.table(table_brand_display, margin = 2))
                
                   7 Inches  10 Inches  12 Inches  13 Inches   8 Inches
  Outside Option 0.54782048 0.00000000 0.00000000 0.00000000 0.00000000
  A              0.06623157 0.12289590 0.16290850 0.15642367 0.13190047
  B              0.06200145 0.15868606 0.15424837 0.13664596 0.13707304
  C              0.06457981 0.13809446 0.13480392 0.13354037 0.15517703
  D              0.06744017 0.13695048 0.12287582 0.15299117 0.14590208
  E              0.06087342 0.15002451 0.13692810 0.12994443 0.15731740
  F              0.05793248 0.13580650 0.16160131 0.14089572 0.15205565
  G              0.07312062 0.15754208 0.12663399 0.14955868 0.12057433
> 
> #############################################
> ## 1.3 Analysis of Chosen Alternatives
> #############################################
> 
> cat("\n===========================================\n")

===========================================
> cat("        CHOSEN ALTERNATIVES ANALYSIS\n")
        CHOSEN ALTERNATIVES ANALYSIS
> cat("===========================================\n")
===========================================
> 
> # Filter rows where the alternative was chosen
> chosen_rows <- combined_data %>% filter(Chosen == 1)
> 
> cat("\n--- Frequency and Proportion of Chosen Cash_Back Levels ---\n")

--- Frequency and Proportion of Chosen Cash_Back Levels ---
> chosen_cb_freq <- table(chosen_rows$Cash_Back)
> print(chosen_cb_freq)

No Cash Back      100 EUR      150 EUR       50 EUR 
        8181         1609          628         3180 
> 
> cat("\nProportion among chosen:\n")

Proportion among chosen:
> print(prop.table(chosen_cb_freq))

No Cash Back      100 EUR      150 EUR       50 EUR 
  0.60163259   0.11832622   0.04618326   0.23385792 
> 
> cat("\nProportion of Cash_Back in Full Dataset:\n")

Proportion of Cash_Back in Full Dataset:
> print(prop.table(table(combined_data$Cash_Back)))

No Cash Back      100 EUR      150 EUR       50 EUR 
  0.57030446   0.13261141   0.07039638   0.22668775 
> 
> # Price statistics for chosen rows
> cat("\n--- Price Statistics for Chosen Rows ---\n")

--- Price Statistics for Chosen Rows ---
> chosen_price_stats <- chosen_rows %>%
+   summarise(
+     mean_price   = mean(Price),
+     median_price = median(Price),
+     min_price    = min(Price),
+     max_price    = max(Price)
+   )
> print(chosen_price_stats)
  mean_price median_price min_price max_price
1   2.843373         1.99         0      8.99
> 
> # Summaries by Brand and Cash_Back
> cat("\n--- Summary by Brand and Cash_Back ---\n")

--- Summary by Brand and Cash_Back ---
> combined_data %>%
+   group_by(Brand, Cash_Back) %>%
+   summarise(
+     count        = n(),
+     mean_price   = mean(Price),
+     mean_chosen  = mean(Chosen),
+     .groups = "drop"
+   ) %>%
+   arrange(Cash_Back, Brand) %>%
+   print()
# A tibble: 29 × 5
   Brand          Cash_Back    count mean_price mean_chosen
   <fct>          <fct>        <int>      <dbl>       <dbl>
 1 Outside Option No Cash Back 13598       0          0.266
 2 A              No Cash Back  2387       3.39       0.315
 3 B              No Cash Back  2416       3.60       0.334
 4 C              No Cash Back  2377       3.38       0.289
 5 D              No Cash Back  2655       3.40       0.241
 6 E              No Cash Back  2519       3.57       0.187
 7 F              No Cash Back  2543       3.48       0.251
 8 G              No Cash Back  2525       3.57       0.225
 9 A              100 EUR       1012       5.95       0.261
10 B              100 EUR       1143       6.14       0.308
# ℹ 19 more rows
# ℹ Use `print(n = ...)` to see more rows
> 
> 
> #############################################
> ## 1.4 Additional Summaries and Checks
> #############################################
> 
> cat("\n===========================================\n")

===========================================
> cat("      ADDITIONAL SUMMARIES AND CHECKS\n")
      ADDITIONAL SUMMARIES AND CHECKS
> cat("===========================================\n")
===========================================
> 
> # Brand-level Summaries
> cat("\n--- Brand-level Summaries ---\n")

--- Brand-level Summaries ---
> brand_summaries <- combined_data %>%
+   group_by(Brand) %>%
+   summarise(
+     count          = n(),
+     mean_price     = mean(Price),
+     median_price   = median(Price),
+     chosen_rate    = mean(Chosen),
+     top_memory     = names(sort(table(Memory), decreasing = TRUE))[1],
+     top_display    = names(sort(table(Display_Size), decreasing = TRUE))[1],
+     .groups = "drop"
+   ) %>%
+   arrange(desc(count))
> print(brand_summaries)
# A tibble: 8 × 7
  Brand          count mean_price median_price chosen_rate top_memory top_display
  <fct>          <int>      <dbl>        <dbl>       <dbl> <chr>      <chr>      
1 Outside Option 13598       0            0          0.266 8GB        7 Inches   
2 D               5836       4.55         3.99       0.218 128GB      7 Inches   
3 C               5830       4.76         4.99       0.252 32GB       8 Inches   
4 A               5829       4.60         4.99       0.299 16GB       7 Inches   
5 B               5827       4.65         4.99       0.330 128GB      7 Inches   
6 E               5826       4.74         4.99       0.177 16GB       8 Inches   
7 F               5825       4.38         3.99       0.235 32GB       8 Inches   
8 G               5821       4.63         3.99       0.202 128GB      7 Inches   
> 
> # Unique (Brand, Cash_Back, Price) combos
> cat("\n--- Number of Unique (Brand, Cash_Back, Price) Combinations ---\n")

--- Number of Unique (Brand, Cash_Back, Price) Combinations ---
> unique_combos <- combined_data %>%
+   distinct(Brand, Cash_Back, Price) %>%
+   nrow()
> cat("Unique combinations =", unique_combos, "\n")
Unique combinations = 162 
> 
> 
> #############################################
> ## 1.5 Visualizations
> #############################################
> 
> 
> cat("\n===========================================\n")

===========================================
> cat("      VISUALIZATIONS (MODEL-FREE)\n")
      VISUALIZATIONS (MODEL-FREE)
> cat("===========================================\n")
===========================================
> 
> # 2.1 Bar plot for Cash_Back frequencies
> cat("\n--- Bar Plot of Cash_Back Frequencies ---\n")

--- Bar Plot of Cash_Back Frequencies ---
> ggplot(as.data.frame(table(combined_data$Cash_Back)), aes(Var1, Freq)) +
+   geom_bar(stat = "identity") +
+   labs(
+     title = "Frequency of Cashback Levels",
+     x = "Cash_Back",
+     y = "Frequency"
+   ) +
+   theme_minimal()
> 
> # 2.2 Boxplot of Price by Cash_Back
> cat("\n--- Boxplot of Price by Cash_Back ---\n")

--- Boxplot of Price by Cash_Back ---
> ggplot(combined_data, aes(x = Cash_Back, y = Price)) +
+   geom_boxplot() +
+   labs(
+     title = "Price Distribution by Cashback Level",
+     x = "Cash_Back",
+     y = "Price"
+   ) +
+   theme_minimal()
> 
> # 2.3 Stacked bar of Brand across Price_Bin
> cat("\n--- Proportion of Brands Across Price Bins ---\n")

--- Proportion of Brands Across Price Bins ---
> ggplot(combined_data, aes(x = Price_Bin, fill = Brand)) +
+   geom_bar(position = "fill") +
+   labs(
+     title = "Proportion of Brands Across Price Bins",
+     x = "Price Bin",
+     y = "Proportion"
+   ) +
+   theme_minimal()
> 
> # 2.4 Price vs. Probability of Being Chosen (line plot)
> cat("\n--- Price vs. Probability of Being Chosen ---\n")

--- Price vs. Probability of Being Chosen ---
> combined_data %>%
+   group_by(Price) %>%
+   summarise(mean_chosen = mean(Chosen)) %>%
+   ggplot(aes(x = Price, y = mean_chosen)) +
+   geom_line(color = "blue") +
+   geom_point(color = "blue") +
+   labs(
+     title = "Price vs. Probability of Being Chosen",
+     x = "Price",
+     y = "Mean Probability of Choice"
+   ) +
+   theme_minimal()
> 
> # 2.5 Nonlinear Effects: Price Bin vs. Mean Chosen
> cat("\n--- Nonlinear Effects: Price Bin vs. Mean Chosen ---\n")

--- Nonlinear Effects: Price Bin vs. Mean Chosen ---
> combined_data %>%
+   group_by(Price_Bin) %>%
+   summarise(mean_chosen = mean(Chosen)) %>%
+   ggplot(aes(x = Price_Bin, y = mean_chosen)) +
+   geom_col(fill = "darkgreen") +
+   labs(
+     title = "Nonlinear Effects: Price Bin vs. Mean Chosen",
+     x = "Price Bin",
+     y = "Mean Probability of Choice"
+   ) +
+   theme_minimal()
> 
> # 2.6 Example: Distribution of Memory within Brand
> cat("\n--- Bar Plot: Distribution of Memory within each Brand ---\n")

--- Bar Plot: Distribution of Memory within each Brand ---
> ggplot(combined_data, aes(x = Memory, fill = Brand)) +
+   geom_bar(position = "dodge") +
+   labs(
+     title = "Distribution of Memory within each Brand",
+     x = "Memory",
+     y = "Count"
+   ) +
+   theme_minimal()
> 
> cat("\n\n======== END OF MODEL-FREE ANALYSIS ========\n")


======== END OF MODEL-FREE ANALYSIS ========
> 
> #############################################
> ## 2. Model Specification and Estimation (BASE MODEL)
> #############################################
> 
> # 2.1 Base formula (no interactions)
> mnl_formula <- Chosen ~ 
+   Price + 
+   System_B + 
+   Brand + 
+   Resolution + 
+   Memory +
+   SD_Slot + 
+   Performance + 
+   Battery_Run_Time + 
+   Connections +
+   Sync_to_Smartphone + 
+   Value_Pack + 
+   Equipment + 
+   Cash_Back +
+   Display_Size | 0
> 
> # 2.2 Estimate the BASE MNL model
> mnl_model <- mlogit(
+   formula = mnl_formula,
+   data    = mlogit_data
+ )
> 
> # 2.3 View summary
> summary(mnl_model)

Call:
mlogit(formula = Chosen ~ Price + System_B + Brand + Resolution + 
    Memory + SD_Slot + Performance + Battery_Run_Time + Connections + 
    Sync_to_Smartphone + Value_Pack + Equipment + Cash_Back + 
    Display_Size | 0, data = mlogit_data, method = "nr")

Frequencies of alternatives:choice
      1       2       3       4 
0.22922 0.27982 0.22503 0.26592 

nr method
4 iterations, 0h:0m:2s 
g'(-H)^-1g = 3.59E-07 
gradient close to zero 

Coefficients :
                                     Estimate Std. Error  z-value  Pr(>|z|)    
Price                              -0.2008174  0.0066263 -30.3062 < 2.2e-16 ***
System_B                            0.0246109  0.0331488   0.7424 0.4578218    
BrandA                              0.2386235  0.0679642   3.5110 0.0004464 ***
BrandB                              0.4051072  0.0656535   6.1704 6.813e-10 ***
BrandC                              0.1421554  0.0785445   1.8099 0.0703157 .  
BrandD                             -0.1682400  0.0711896  -2.3633 0.0181146 *  
BrandE                             -0.2941234  0.0727747  -4.0416 5.310e-05 ***
BrandF                             -0.0962360  0.0691163  -1.3924 0.1638081    
BrandG                             -0.1255138  0.0714673  -1.7562 0.0790474 .  
ResolutionHigh                      0.0667515  0.0217670   3.0666 0.0021648 ** 
Memory128GB                         0.3501807  0.0357967   9.7825 < 2.2e-16 ***
Memory16GB                          0.1541137  0.0368092   4.1868 2.829e-05 ***
Memory32GB                          0.2183950  0.0362602   6.0230 1.712e-09 ***
Memory64GB                          0.3412295  0.0357583   9.5427 < 2.2e-16 ***
SD_SlotWithout                     -0.1839536  0.0275082  -6.6872 2.274e-11 ***
Performance1.6 GHz                  0.0802412  0.0262160   3.0608 0.0022077 ** 
Performance2.2 GHz                  0.1409665  0.0257989   5.4640 4.654e-08 ***
Battery_Run_Time8-12 hours          0.0826472  0.0217897   3.7929 0.0001489 ***
ConnectionsWLAN + LTE (4G)          0.2138867  0.0259288   8.2490 2.220e-16 ***
ConnectionsWLAN + UMTS (3G)         0.2079653  0.0260499   7.9833 1.332e-15 ***
Sync_to_SmartphoneYes               0.1087581  0.0217877   4.9917 5.985e-07 ***
Value_PackYes                       0.0565656  0.0248637   2.2750 0.0229045 *  
Equipment32GB Memory Card           0.0362549  0.0461561   0.7855 0.4321687    
EquipmentCover                      0.0137772  0.0463839   0.2970 0.7664478    
EquipmentKeyboard                   0.0549600  0.0457314   1.2018 0.2294409    
EquipmentKeyboard + Mouse + Pencil  0.1373377  0.0456955   3.0055 0.0026515 ** 
EquipmentKeyboard + Pencil          0.0713373  0.0458141   1.5571 0.1194458    
EquipmentMouse                     -0.0072622  0.0463190  -0.1568 0.8754129    
EquipmentPencil                    -0.0271308  0.0465177  -0.5832 0.5597342    
Cash_Back100 EUR                    0.2554544  0.0373527   6.8390 7.976e-12 ***
Cash_Back150 EUR                    0.1156120  0.0531584   2.1749 0.0296407 *  
Cash_Back50 EUR                     0.1267758  0.0276818   4.5798 4.655e-06 ***
Display_Size10 Inches               0.2450670  0.0387466   6.3249 2.535e-10 ***
Display_Size12 Inches               0.2674559  0.0389371   6.8689 6.469e-12 ***
Display_Size13 Inches               0.3040154  0.0383425   7.9289 2.220e-15 ***
Display_Size8 Inches                0.0997575  0.0305660   3.2637 0.0010998 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-Likelihood: -17763
> 
> 
> #############################################
> ## 2.4 Compute Model Fit Metrics (BASE MODEL)
> #############################################
> 
> # 2.4.1 Log-likelihood
> log_likelihood <- logLik(mnl_model)
> 
> # 2.4.2 Null log-likelihood (uniform distribution among 4 alts)
> num_tasks <- nrow(mlogit_data) / 4
> null_loglik_uniform <- num_tasks * log(1/4)
> 
> # 2.4.3 Number of parameters (k) & observations (n)
> k <- length(coef(mnl_model))
> n <- nrow(mlogit_data)
> 
> # 2.4.4 McFadden's R^2
> mcfadden_r2 <- 1 - (as.numeric(log_likelihood) / null_loglik_uniform)
> 
> # 2.4.5 Likelihood Ratio (LR) test
> lr_test <- -2 * (null_loglik_uniform - as.numeric(log_likelihood))
> lr_p_value <- pchisq(lr_test, df = k, lower.tail = FALSE)
> 
> # 2.4.6 AIC & BIC
> aic <- AIC(mnl_model) 
> bic <- -2 * as.numeric(log_likelihood) + k * log(n)
> 
> # 2.4.7 Predictive accuracy
> mnl_predictions   <- predict(mnl_model, newdata = mlogit_data)
> predicted_choice  <- apply(mnl_predictions, 1, which.max)
> actual_choice     <- mlogit_data$AltID[mlogit_data$Chosen == 1]
> accuracy          <- mean(predicted_choice == actual_choice)
> accuracy_percent  <- accuracy * 100
> 
> #############################################
> ## 2.5 Print Model Fit Results (BASE MODEL)
> #############################################
> 
> cat("\nMODEL FIT METRICS (Base Model)\n")

MODEL FIT METRICS (Base Model)
> cat("----------------------------------------\n")
----------------------------------------
> cat("Log-Likelihood (Model):  ", as.numeric(log_likelihood), "\n")
Log-Likelihood (Model):   -17763.16 
> cat("Log-Likelihood (Null):   ", null_loglik_uniform, "\n")
Log-Likelihood (Null):    -18850.83 
> cat("McFadden's R-squared:    ", mcfadden_r2, "\n")
McFadden's R-squared:     0.05769877 
> cat("Likelihood Ratio (LR):   ", lr_test, "\n")
Likelihood Ratio (LR):    2175.34 
> cat("LR Test p-value:         ", lr_p_value, "\n")
LR Test p-value:          0 
> cat("AIC:                     ", aic, "\n")
AIC:                      35598.32 
> cat("BIC:                     ", bic, "\n")
BIC:                      35918.86 
> cat("Predictive Accuracy (%): ", accuracy_percent, "\n")
Predictive Accuracy (%):  37.00544 
> 
> #############################################
> ## 2.6 Diagnostics (BASE MODEL)
> #############################################
> 
> # 2.6.1 1st-order condition
> #  => summary(mnl_model) typically shows gradient info
> #  => "gradient close to zero" means solution is good
> 
> # 2.6.2 2nd-order condition: Hessian negative definite
> hessian_eigs <- eigen(mnl_model$hessian)$values
> cat("\nHessian Eigenvalues (Base Model):\n")

Hessian Eigenvalues (Base Model):
> print(hessian_eigs)
 [1]    -31.34173   -150.09518   -302.94146   -318.47975   -362.13778   -424.23573   -673.22992   -847.51038   -863.29898   -913.06121   -925.41712
[12]   -936.31483   -959.91453   -975.29721   -989.21658  -1019.14937  -1062.40661  -1126.96539  -1161.31306  -1165.77180  -1199.05470  -1276.40736
[23]  -1560.09236  -1588.84939  -1687.78527  -1756.09126  -1815.88265  -1922.49990  -2032.35248  -2252.60246  -2307.40886  -2601.99040  -3250.55066
[34]  -3305.49453  -4937.39913 -88195.41406
> cat("\nIf all these eigenvalues are negative, we have a local maximum.\n")

If all these eigenvalues are negative, we have a local maximum.
> 
> 
> #############################################
> ## 3. Model Specification and Estimation (INTERACTION MODEL)
> #############################################
> 
> # 3.1 Define formula with interactions
> #     We add Price:Cash_Back, Price:Brand, Battery_Run_Time:Price, Memory:SD_Slot
> 
> mnl_formula_interactions <- Chosen ~ 
+   # main effects
+   Price + 
+   System_B + 
+   Brand + 
+   Resolution + 
+   Memory +
+   SD_Slot + 
+   Performance + 
+   Battery_Run_Time + 
+   Connections +
+   Sync_to_Smartphone + 
+   Value_Pack + 
+   Equipment + 
+   Cash_Back +
+   Display_Size +
+   
+   # interaction effects
+   Price:Cash_Back +
+   # Price:Brand +
+   # Price:Performance +
+   Memory:SD_Slot |
+   0
> 
> # 3.2 Estimate the MNL model with interactions
> mnl_model_int <- mlogit(
+   formula = mnl_formula_interactions,
+   data    = mlogit_data
+ )
> 
> # 3.3 View summary
> summary(mnl_model_int)

Call:
mlogit(formula = Chosen ~ Price + System_B + Brand + Resolution + 
    Memory + SD_Slot + Performance + Battery_Run_Time + Connections + 
    Sync_to_Smartphone + Value_Pack + Equipment + Cash_Back + 
    Display_Size + Price:Cash_Back + Memory:SD_Slot | 0, data = mlogit_data, 
    method = "nr")

Frequencies of alternatives:choice
      1       2       3       4 
0.22922 0.27982 0.22503 0.26592 

nr method
5 iterations, 0h:0m:3s 
g'(-H)^-1g = 2.49E-06 
successive function values within tolerance limits 

Coefficients :
                                     Estimate Std. Error  z-value  Pr(>|z|)    
Price                              -0.1845817  0.0089093 -20.7179 < 2.2e-16 ***
System_B                            0.0243725  0.0331712   0.7347 0.4624919    
BrandA                              0.2696641  0.0805715   3.3469 0.0008172 ***
BrandB                              0.4332673  0.0785625   5.5149 3.489e-08 ***
BrandC                              0.1741965  0.0897251   1.9414 0.0522040 .  
BrandD                             -0.1348678  0.0832848  -1.6194 0.1053705    
BrandE                             -0.2652041  0.0843489  -3.1441 0.0016658 ** 
BrandF                             -0.0687078  0.0812571  -0.8456 0.3977978    
BrandG                             -0.0990117  0.0834463  -1.1865 0.2354122    
ResolutionHigh                      0.0696010  0.0217937   3.1936 0.0014050 ** 
Memory128GB                         0.1972127  0.0669640   2.9451 0.0032290 ** 
Memory16GB                          0.0825189  0.0693306   1.1902 0.2339588    
Memory32GB                          0.1763240  0.0678933   2.5971 0.0094021 ** 
Memory64GB                          0.2306386  0.0666173   3.4621 0.0005359 ***
SD_SlotWithout                     -0.3037396  0.0622094  -4.8825 1.047e-06 ***
Performance1.6 GHz                  0.0809989  0.0262681   3.0835 0.0020455 ** 
Performance2.2 GHz                  0.1423568  0.0258416   5.5088 3.613e-08 ***
Battery_Run_Time8-12 hours          0.0806202  0.0218393   3.6915 0.0002229 ***
ConnectionsWLAN + LTE (4G)          0.2140569  0.0259648   8.2441 2.220e-16 ***
ConnectionsWLAN + UMTS (3G)         0.2106696  0.0260906   8.0746 6.661e-16 ***
Sync_to_SmartphoneYes               0.1098389  0.0218225   5.0333 4.821e-07 ***
Value_PackYes                       0.0514139  0.0250970   2.0486 0.0405009 *  
Equipment32GB Memory Card           0.0333838  0.0462144   0.7224 0.4700687    
EquipmentCover                      0.0139998  0.0464067   0.3017 0.7628988    
EquipmentKeyboard                   0.0557175  0.0457708   1.2173 0.2234843    
EquipmentKeyboard + Mouse + Pencil  0.1333194  0.0457446   2.9144 0.0035634 ** 
EquipmentKeyboard + Pencil          0.0745485  0.0458518   1.6259 0.1039794    
EquipmentMouse                     -0.0088815  0.0463164  -0.1918 0.8479321    
EquipmentPencil                    -0.0247327  0.0465538  -0.5313 0.5952305    
Cash_Back100 EUR                    0.3255803  0.1088400   2.9914 0.0027773 ** 
Cash_Back150 EUR                    0.1238685  0.2738697   0.4523 0.6510601    
Cash_Back50 EUR                     0.2806422  0.0560239   5.0093 5.462e-07 ***
Display_Size10 Inches               0.2412112  0.0391265   6.1649 7.052e-10 ***
Display_Size12 Inches               0.2621950  0.0392585   6.6787 2.411e-11 ***
Display_Size13 Inches               0.3040934  0.0384995   7.8986 2.887e-15 ***
Display_Size8 Inches                0.0999914  0.0305846   3.2693 0.0010780 ** 
Price:Cash_Back100 EUR             -0.0196766  0.0193466  -1.0171 0.3091242    
Price:Cash_Back150 EUR             -0.0097229  0.0388134  -0.2505 0.8021971    
Price:Cash_Back50 EUR              -0.0422340  0.0134921  -3.1303 0.0017464 ** 
Memory128GB:SD_SlotWithout          0.2292556  0.0839442   2.7310 0.0063133 ** 
Memory16GB:SD_SlotWithout           0.1105726  0.0866677   1.2758 0.2020182    
Memory32GB:SD_SlotWithout           0.0661913  0.0844182   0.7841 0.4329886    
Memory64GB:SD_SlotWithout           0.1715502  0.0840634   2.0407 0.0412784 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-Likelihood: -17753
> 
> 
> #############################################
> ## 3.4 Compute Model Fit Metrics (INTERACTION MODEL)
> #############################################
> 
> # 3.4.1 Log-likelihood
> log_likelihood_int <- logLik(mnl_model_int)
> 
> # 3.4.2 Same null log-likelihood as before
> #     (still uniform across 4 alts)
> null_loglik_int <- null_loglik_uniform
> 
> # 3.4.3 Number of parameters (k2) & observations (n2)
> k2 <- length(coef(mnl_model_int))
> n2 <- nrow(mlogit_data)
> 
> # 3.4.4 McFadden's R^2
> mcfadden_r2_int <- 1 - (as.numeric(log_likelihood_int) / null_loglik_int)
> 
> # 3.4.5 Likelihood Ratio (LR) test
> lr_test_int <- -2 * (null_loglik_int - as.numeric(log_likelihood_int))
> lr_p_value_int <- pchisq(lr_test_int, df = k2, lower.tail = FALSE)
> 
> # 3.4.6 AIC & BIC
> aic_int <- AIC(mnl_model_int) 
> bic_int <- -2 * as.numeric(log_likelihood_int) + k2 * log(n2)
> 
> # 3.4.7 Predictive accuracy
> mnl_predictions_int <- predict(mnl_model_int, newdata = mlogit_data)
> predicted_choice_int <- apply(mnl_predictions_int, 1, which.max)
> actual_choice_int    <- mlogit_data$AltID[mlogit_data$Chosen == 1]
> accuracy_int         <- mean(predicted_choice_int == actual_choice_int)
> accuracy_percent_int <- accuracy_int * 100
> 
> #############################################
> ## 3.5 Print Model Fit Results (INTERACTION MODEL)
> #############################################
> 
> cat("\nMODEL FIT METRICS (Interaction Model)\n")

MODEL FIT METRICS (Interaction Model)
> cat("----------------------------------------\n")
----------------------------------------
> cat("Log-Likelihood (Model):  ", as.numeric(log_likelihood_int), "\n")
Log-Likelihood (Model):   -17753.34 
> cat("Log-Likelihood (Null):   ", null_loglik_int, "\n")
Log-Likelihood (Null):    -18850.83 
> cat("McFadden's R-squared:    ", mcfadden_r2_int, "\n")
McFadden's R-squared:     0.05821953 
> cat("Likelihood Ratio (LR):   ", lr_test_int, "\n")
Likelihood Ratio (LR):    2194.973 
> cat("LR Test p-value:         ", lr_p_value_int, "\n")
LR Test p-value:          0 
> cat("AIC:                     ", aic_int, "\n")
AIC:                      35592.69 
> cat("BIC:                     ", bic_int, "\n")
BIC:                      35975.56 
> cat("Predictive Accuracy (%): ", accuracy_percent_int, "\n")
Predictive Accuracy (%):  37.34373 
> 
> 
> #############################################
> ## 3.6 Diagnostics (INTERACTION MODEL)
> #############################################
> 
> # 3.6.1 1st-order condition
> #     Check summary(mnl_model_int) for gradient info
> 
> 
> ## 3.6.2 2nd-order condition: Hessian negative definite
> hessian_eigs_int <- eigen(mnl_model_int$hessian)$values
> cat("\nHessian Eigenvalues (Interaction Model):\n")

Hessian Eigenvalues (Interaction Model):
> print(hessian_eigs_int)
 [1]     -12.98983     -17.21087     -55.91149     -82.56758    -163.06268    -180.31520    -193.44323    -203.44369    -312.87074    -359.69081
[11]    -392.45300    -450.68963    -713.76538    -867.77938    -913.24984    -916.84894    -935.65666    -958.12303    -971.24643    -988.82322
[21]   -1022.89108   -1066.23061   -1127.38374   -1161.92018   -1170.79796   -1230.71064   -1282.60328   -1573.01824   -1811.84780   -2024.57558
[31]   -2217.73508   -2428.34308   -2466.80739   -2545.56119   -2625.24649   -2697.54915   -3264.32761   -3308.73069   -4658.62429   -9567.82917
[41]  -32510.49117  -46278.00696 -107176.86894
> cat("\nIf all these eigenvalues are negative, we have a local maximum.\n")

If all these eigenvalues are negative, we have a local maximum.
> 
